input {
  file {
    path => "D:/ELK/logstash-7.8.1/movies.csv"
    start_position => "beginning"
    sincedb_path => "D:/ELK/logstash-7.8.1/offset"
  }
}
filter {
  csv {
    separator => ","
    columns => ["id","content","genre"]
  }
  ## mutate类型过滤器
  mutate {
    split => { "genre" => "|" }
    remove_field => ["path", "host","@timestamp","message"] ## 移除字段
  }

  mutate {
    add_field => {"testField1" => "0"} ## 添加字段 并设置默认值???
    add_field => {"testField2" => "%{name}"} ##引用name中的值
  }

  mutate { ## 复制字段到另一个字段, 另一个字段不需要单独添加
    copy => {"name" => "name2"}
  }

  mutate { ## 正则表达式 将name字段中的o替换成p
    gsub => ["name","o","p"]
  }

  mutate {
    convert => { ## 将字段类型转为指定类型
      "name" => "string"
      "age" => "integer"
    }
  }

  mutate {
    # lowercase => [ "name" ] 将字段转为大写
    uppercase => [ "name" ]
  }

  mutate { ## 重命名字段
    rename => {"name" => "name3"}
  }

  mutate { ## 去除name字段的前后空格
    strip => ["name"]
  }

  mutate { ## 更新字段的值
    update => {"name" => "li"}
  }

  mutate { ## 更新字段的值
    replace => { "message" => "%{source_host}: My new message" }
  }
  mutate {
    split => ["content", "("] ## 切分
    add_field => { "title" => "%{[content][0]}"}
    add_field => { "year" => "%{[content][1]}"}
  }
  mutate {## 将数据类型为array的进行拼接 | 分隔
    join => ["message", "|"]
  }
  mutate {
    convert => {
      "year" => "integer"
    }
    strip => ["title"]
    remove_field => ["path", "host","@timestamp","message","content"]
  }

}
output {
  elasticsearch {
    hosts => "http://localhost:9200"
    index => "movies"
    document_id => "%{id}"
  }
  stdout {}
}
# 执行顺序
#    rename(event) if @rename
#    update(event) if @update
#    replace(event) if @replace
#    convert(event) if @convert
#    gsub(event) if @gsub
#    uppercase(event) if @uppercase
#    lowercase(event) if @lowercase
#    strip(event) if @strip
#    remove(event) if @remove
#    split(event) if @split
#    join(event) if @join
#    merge(event) if @merge
#    filter_matched(event)